<?php

/**
 * Comment Ratings
 *
 * adds rating dropdown for PW comments fieldtype. You can make it shine with jQuery rating plugins 
 * like this: http://zensoftware.org/archives/483
 *
 * Copyright 2013 by Antti Peisa
 * Sponsored by Ovidiu Savescu 
 *
 * ProcessWire 2.x 
 * Copyright (C) 2010 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class CommentRatings extends WireData implements Module {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(
			'title' => 'Comment Ratings',
			'version' => 100,
			'summary' => 'Adds star rating for PW comments fieldtype',
			'href' => 'http://modules.processwire.com',
			'author' => 'Antti Peisa',
			'singular' => true,
			'autoload' => true,
			'requires' => 'FieldtypeComments'
		);
	}

	public function init() {}

	public function ready() {
		$this->addHookProperty('CommentArray::averageRating', $this, 'commentsAverageRating');
		$this->addHookProperty("Comment::rating", $this, "commentRating");
		$this->addHookAfter('FieldtypeComments::getConfigInputfields', $this, 'addRatingsOption');
		$this->addHook('CommentArray::renderFormWithRatings', $this, 'renderFormWithRatings');
		$this->addHookBefore('InputfieldCommentsAdmin::render', $this, 'addRatingsToAdmin'); 
	}

	public function addRatingsToAdmin($event) {
		$event->replace = true;
		$comments = $event->object;

		$out = '';
		$n = 0; 

		if(!count($comments->value)) return "<p>There are currently no items to display.</p>";

		$out = "\n<ul class='Inputfields InputfieldCommentsAdminList'>";
		foreach($comments->value as $comment) {
			$out .= $this->renderItem($comment, $n++); 
		}
		$out .= "\n</ul>";

		$event->return = $out; 
	}

	public function commentsAverageRating($event) {

		$commentArray = $event->object;
		$id_str = '';
		$avg = '';


		// Loop all comments to get their ID
		foreach ($commentArray as $comment) {
			// Skip spam, unapproved etc 
			if ($comment->status != 1) continue;
			$id_str .= $comment->id . ",";
		}

		// Remove the last ,
		$id_str = rtrim($id_str, ",");

		if (empty($id_str)) {
			$event->return = $avg;
			return;	
		} 

		// Query the avg rating from help table
		$result = $this->db->query("SELECT AVG(rating) as avg FROM {$this->className} WHERE comment_id IN ($id_str)");
		while ($row = $result->fetch_assoc()) {
	    	$avg = $row['avg'];
	    }
	    if (is_null($avg)) $avg = '';
	    $event->return = $avg;

	}

	public function commentRating($event) {
		$comment = $event->object;
		$rating = '';
		$result = $this->db->query("SELECT rating FROM {$this->className} WHERE comment_id = {$comment->id}");
		while ($row = $result->fetch_assoc()) {
	    	$rating = $row['rating'];
	    }
		$event->return = $rating;
	}

	public function addRatingsOption($event) {
		// Get the "details" tab of comments field
		$inputfields = $event->return;

		// Get the Field
		$field = $event->arguments(0);

		$name = 'useRatings'; 
		$f = wire('modules')->get('InputfieldCheckbox'); 
		$f->attr('name', $name); 
		$f->attr('value', 1); 
		$f->attr('checked', $field->$name ? 'checked' : ''); 
		$f->label = 'Use ratings field in comment form?';
		$f->description = "When checked, the comment submission form will also include a rating selection.";
		$inputfields->append($f); 

		$name = 'ratingOptions'; 
		$f = wire('modules')->get('InputfieldTextarea'); 
		$f->attr('name', $name); 
		$f->attr('value', $field->$name);  
		$f->label = 'Rating options';
		$f->description = "If you want to customize rating values and title (default is 1-5), then put them here. Add them one per line, in value=title. Value should be integer and title is string. In example:
1=poor
2=medium* (star means default value)
3=great";
		$inputfields->append($f); 

		$event->return = $inputfields;

	}


	public function renderFormWithRatings($event) {

		$commentsArray = $event->object;

		$options = $event->arguments(0);
		if ( ! is_array($options)) $options = array();

		// Include CommentFormWithRatings
		$dirname = dirname(__FILE__); 
		require_once($dirname . "/CommentFormWithRatings.php"); 

		// Create new Form
		$form = new CommentFormWithRatings($commentsArray->page, $commentsArray, $options);

		$event->return = $form->render();
	}

	protected function renderItem(Comment $comment, $n) {

		$statuses = array(
			Comment::statusApproved => "Approved",
			Comment::statusPending => "Pending", 
			Comment::statusSpam => "Spam", 
			);

		$statusName = '';
		$statusOut = "<select name='{$this->name}_status_{$comment->id}'>";
		foreach($statuses as $status => $label) {
			if($comment->status == $status) {
				$selected = " selected='selected'";
				$statusName = $label;
			} else {
				$selected = '';
			}
			$statusOut .= "<option value='$status'$selected>$label</option>";
		}
		$statusOut .= "<option value='delete{$comment->id}'>Delete</option>";
		$statusOut .= "</select>";

		$headLabel = $statusName; 
		$num = $n+1; 

		$liID = "CommentsAdminItem{$comment->id}";

		if($comment->status == Comment::statusApproved) $liClass = "InputfieldStateCollapsed";
			else if($comment->status == Comment::statusSpam) $liClass = "InputfieldStateCollapsed CommentsAdminItemSpam ui-state-error";
			else $liClass = '';

		if($comment->status == Comment::statusSpam) $note = "Spam is automatically deleted after the amount of time specified in the field configuration.";
			else if($comment->status == Comment::statusPending) $note = "This item is awaiting approval or deletion. ";
			else $note = '';

		if($note) $note = "\n\t\t\t<p class='description CommentsAdminItemNote'>$note</p>";

		$out = 	"\n\t<li id='$liID' class='CommentsAdminItem$statusName Inputfield ui-widget $liClass'>" . 
			"\n\t\t<label class='CommentsAdminItemHead ui-widget-header'>" . 
			"\n\t\t\t<span class='CommentsAdminItemHeadLabel'>$headLabel</span>" . 
			"\n\t\t\t<span class='CommentsAdminItemBy'>Comment #$num Posted " . date('m/d/y H:i', $comment->created) . " by " . htmlentities($comment->cite, ENT_QUOTES, 'UTF-8') . "</span>" . 
			"\n\t\t</label>" . 
			"\n\t\t<div class='ui-widget-content'>" . $note . 
			"\n\t\t\t<p class='CommentsAdminItemCite'><label>Cite <input type='text' name='{$this->name}_cite_{$comment->id}' value='" . htmlentities($comment->cite, ENT_QUOTES, "UTF-8") . "' /></label></p>" . 
			"\n\t\t\t<p class='CommentsAdminItemEmail'><label>E-Mail <input type='text' name='{$this->name}_email_{$comment->id}' value='" . htmlentities($comment->email, ENT_QUOTES, "UTF-8") . "' /></label></p>" . 
			"\n\t\t\t<p class='CommentsAdminItemWebsite'><label>Website <input type='text' name='{$this->name}_website_{$comment->id}' value='" . htmlentities($comment->website, ENT_QUOTES, "UTF-8") . "' /></label></p>" . 
			"\n\t\t\t<p class='CommentsAdminItemStatus'><label>&nbsp; $statusOut</label></p>";

		if ($comment->rating) $out .= "\n\t\t\t<p style='float: left;' class='CommentsAdminItemWebsite'><label>Rating: " . $comment->rating . "</label></p>";

		$out .=	"\n\t\t\t<p class='CommentsAdminItemText'><label>Text <textarea name='{$this->name}_text_{$comment->id}' rows='3'>" . htmlentities(trim($comment->text), ENT_QUOTES, "UTF-8") . "</textarea></label></p>" . 
			"\n\t\t\t<input class='CommentsAdminItemSort' type='hidden' name='sort_{$this->name}_{$comment->id}' value='$n' />" . 
			"\n\t\t</div>" . 
			"\n\t</li>";

		return $out; 
	}

	public function ___install() {

		$sql = <<< _END

CREATE TABLE {$this->className} (
comment_id int unsigned DEFAULT 0,
rating tinyint unsigned DEFAULT 0,
PRIMARY KEY(comment_id)
) ENGINE = MYISAM;

_END;

		$this->db->query($sql);

		$this->message("Created database table: {$this->className}");
	}

	public function ___uninstall() {
		$this->db->query("DROP TABLE {$this->className}");
	}

}